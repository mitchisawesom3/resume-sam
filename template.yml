AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A SAM template for deploying Mitch's resume website infrastructure.
Parameters:
  BucketName:
    Type: String
    Description: Name of bucket to create
Resources:
# Create the get-count Lambda function
  getcount:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-count
      CodeUri: get-count/
      Handler: get-count.handler
      Runtime: nodejs16.x
      Timeout: 5
      Policies: AmazonDynamoDBReadOnlyAccess 
      Events:
        GetCountApi:
          Type: Api
          Properties:
            RestApiId: !Ref visitorCountAPI
            Path: /get-count
            Method: GET
# Create the add-visit Lambda function
  addvisit:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: add-visit
      CodeUri: add-visit/
      Handler: add-visit.lambda_handler
      Runtime: python3.9
      Timeout: 5
      Policies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            Resource: !GetAtt tracking.Arn 
      Events:
        AddVisitApi:
          Type: Api
          Properties:
            RestApiId: !Ref visitorCountAPI
            Path: /add-visit
            Method: GET
# Create the tracking DynamoDB Table
  tracking:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: tracking
      AttributeDefinitions:
        - AttributeName: stats
          AttributeType: S
      KeySchema:
        - AttributeName: stats
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
# Create the Visitor Count API
  visitorCountAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: Visitor Count API-1
      StageName: dev
      Cors: 
        AllowOrigin: "'https://www.mitchbounds.com'"
# Create S3 Bucket for site files
  MitchB:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketName
# Create CloudFront Origin Identity for use in granting CloudFront access to S3
  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'
# Create Bucket Policy to allow CloudFront access to S3 Bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument: !Sub '{ "Version": "2012-10-17", "Statement": [ { "Sid": "1", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}" }, "Action": "s3:GetObject", "Resource": "${MitchB.Arn}/*" }, { "Sid": "2", "Effect": "Allow", "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}" }, "Action": "s3:ListBucket", "Resource": "${MitchB.Arn}" } ] }'
# Create CloudFront Distribution
  PublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - 'www.mitchbounds.com'
        Origins:
          - DomainName: !Sub 
              - '${BucketName}.s3.${AWS::Region}.amazonaws.com'
              - Bucket: !Ref BucketName
            Id: S3-private-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        Enabled: 'true'
        Comment: mitchbounds.com
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3-private-bucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
# Create SSL certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: mitchbounds.com
      SubjectAlternativeNames:
        - "*.mitchbounds.com"
      ValidationMethod: DNS
# Create user account to be utlized with GitHub actions to push changes to S3 bucket
  ResumeSiteUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: S3GetPutAccess
          PolicyDocument: !Sub '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "s3:PutObject","s3:GetObject","s3:ListBucket","s3:DeleteObject" ], "Resource": [ "${MitchB.Arn}","${MitchB.Arn}/*" ] } ] }'
# Create access keys for GitHub actions
  ResumeSiteUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ResumeSiteUser
# Create secret to store access keys and other data to keep it secure
  ResumeSiteCredStorage:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: /
      SecretString: !Sub '{"AWS_KEY_ID":"${ResumeSiteUserKey}","AWS_SECRET_ACCESS_KEY":"${ResumeSiteUserKey.SecretAccessKey}","CF_KEY_ID":"${CacheInvalidateUserKey}","CF_SECRET_ACCESS_KEY":"${CacheInvalidateUserKey.SecretAccessKey}","CF_DISTRIBUTION":"${PublicDistribution}","AWS_BUCKET":"${MitchB}","UPDATE_TEMPLATE":"14"}'
# Create user to invalidate CloudFront cache
  CacheInvalidateUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: CloudFrontInvalidateCache
          PolicyDocument: !Sub '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "cloudfront:GetDistribution","cloudfront:ListInvalidations","cloudfront:GetInvalidation","cloudfront:CreateInvalidation" ], "Resource": "*" } ] }'
# Create access keys for GitHub actions
  CacheInvalidateUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CacheInvalidateUser
  
# Output random data after completion
Outputs:
#  visitorCountAPI:
#    Description: API Gateway endpoint for dev stage
#    Value: !Sub 'https://${visitorCountAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/get-count'
  visitorCountApiId:
    Description: 'API Gateway ID'
    Value: !Ref visitorCountAPI
#    Export:
#      Name: visitorCountApi-RestApiId
#  visitorCountAPIRootResourceId:
#    Value: !GetAtt visitorCountAPI.RootResourceId
#    Export:
#      Name: visitorCountApi-RootResourceId
