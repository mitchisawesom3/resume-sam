AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A SAM template for deploying Mitch's resume website infrastructure.
Resources:
  getcount:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-count
      CodeUri: getcount
      Handler: get-count.handler
      Runtime: nodejs16.x
      Timeout: 15
      Policies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - tracking
            - Arn
      Events:
        GetCountApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: visitorCountAPI
            Path: /get-count
            Method: GET
    Metadata:
      SamResourceId: getcount
  addvisit:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: add-visit
      CodeUri: addvisit
      Handler: add-visit.lambda_handler
      Runtime: python3.9
      Timeout: 15
      Policies:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - tracking
            - Arn
      Events:
        AddVisitApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: visitorCountAPI
            Path: /add-visit
            Method: GET
    Metadata:
      SamResourceId: addvisit
  tracking:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: tracking
      AttributeDefinitions:
      - AttributeName: stats
        AttributeType: S
      KeySchema:
      - AttributeName: stats
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  visitorCountAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: Visitor Count API
      StageName: dev
      Cors:
        AllowOrigin: '''https://www.mitchbounds.com'''
  MitchB:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: mitchb-new
  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: origin identity
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: mitchb-new
      PolicyDocument:
        Fn::Sub: '{ "Version": "2012-10-17", "Statement": [ { "Sid": "1", "Effect":
          "Allow", "Principal": { "AWS": "arn:aws:iam::cloudfront:user/CloudFront
          Origin Access Identity ${CloudFrontOriginIdentity}" }, "Action": "s3:GetObject",
          "Resource": "${MitchB.Arn}/*" }, { "Sid": "2", "Effect": "Allow", "Principal":
          { "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
          ${CloudFrontOriginIdentity}" }, "Action": "s3:ListBucket", "Resource": "${MitchB.Arn}"
          } ] }'
  PublicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
        - www.mitchbounds.com
        Origins:
        - DomainName:
            Fn::Sub: mitchb-new.s3.${AWS::Region}.amazonaws.com
          Id: S3-private-bucket
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginIdentity}
        Enabled: 'true'
        Comment: mitchbounds.com
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: S3-private-bucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn:
            Ref: SSLCertificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: mitchbounds.com
      SubjectAlternativeNames:
      - '*.mitchbounds.com'
      ValidationMethod: DNS
  ResumeSiteUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: S3GetPutAccess
        PolicyDocument:
          Fn::Sub: '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow",
            "Action": [ "s3:PutObject","s3:GetObject","s3:ListBucket","s3:DeleteObject"
            ], "Resource": [ "${MitchB.Arn}","${MitchB.Arn}/*" ] } ] }'
  ResumeSiteUserKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: ResumeSiteUser
  ResumeSiteCredStorage:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: /credentials/${ResumeSiteUser}
      SecretString:
        Fn::Sub: '{"AWS_KEY_ID":"${ResumeSiteUserKey}","AWS_SECRET_ACCESS_KEY":"${ResumeSiteUserKey.SecretAccessKey}"}'
Outputs:
  visitorCountAPI:
    Description: API Gateway endpoint for dev stage
    Value:
      Fn::Sub: https://${visitorCountAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/
  visitorCountApiId:
    Description: API Gateway ARN for Visitor Count API
    Value:
      Ref: visitorCountAPI
    Export:
      Name: visitorCountApi-RestApiId
  visitorCountAPIRootResourceId:
    Value:
      Fn::GetAtt:
      - visitorCountAPI
      - RootResourceId
    Export:
      Name: visitorCountApi-RootResourceId
