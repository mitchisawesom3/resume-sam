name: Deploy to S3

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      API: ${{ steps.samdeploy.outputs.API }}
    env:
      BUCKET_CHECK: ${{ secrets.INITIAL_SETUP == '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install nodejs 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup sam cli
        uses: aws-actions/setup-sam@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create S3 Bucket
        if: ${{ env.BUCKET_CHECK }}
        run: aws s3api create-bucket --bucket ${{ secrets.AWS_BUCKET }} ; gh secret set INITIAL_SETUP --body "complete"
        env:
          GITHUB_TOKEN: ${{ secrets.OAUTH }}

      - name: Build sam template
        run: sam build  

      - name: Deploy sam template
        run: |
          echo "OUTPUT<<EOF" >> $GITHUB_ENV
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --stack-name ${{ secrets.AWS_STACK_NAME }} --s3-bucket ${{ secrets.AWS_BUCKET }} --capabilities CAPABILITY_IAM --region ${{ secrets.AWS_REGION }} --parameter-overrides BucketName=${{ secrets.SITE_BUCKET }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV ; echo $GITHUB_ENV

      - name: Store API URL in variable for testing
        run: echo "API_URL=$(echo "${{ env.OUTPUT }}" | awk '/Value/{print $2}')" >> $GITHUB_ENV

      - name: Run curl on API URL
        if: ${{ env.API_URL != '' }}
        run: curl $API_URL

      - name: Store API URL in outputs
        id: API
        run: echo "::set-output name=API::${{ env.API }}"
  configuresecrets:
    runs-on: ubuntu-latest
    needs: deploy
    env:
      SECRETS_CHECK: ${{ (secrets.AWS_KEY_ID == '') || (secrets.AWS_SECRET_ACCESS_KEY == '') }}
      CF_SECRETS_CHECK: ${{ ( secrets.CF_KEY_ID == '') || (secrets.CF_SECRET_ACCESS_KEY == '') || (secrets.CF_DISTRIBUTION == '') }}
      BUCKET_SECRET_CHECK: ${{ secrets.AWS_BUCKET == '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with: 
          repository: mitchisawesom3/resume-site

      - name: List secrets test
        run: OUTPUT=$(gh secret list | egrep "AWS_BUCKET|AWS_KEY_ID_AWS_SECRET_ACCESS_KEY|CF_DISTRIBUTION|CF_KEY_ID|CF_SECRET_ACCESS_KEY"); echo "OUTPUT=\"$OUTPUT\"" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.OAUTH }}

      - name: Configure Initial AWS Credentials
        if: ${{ env.OUTPUT != '' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Read secrets into environment variables
        if: ${{ env.OUTPUT != '' }}
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: /
          parse-json: true

#      - name: Create Secrets for repo access to AWS
#        if: ${{ env.SECRETS_CHECK == 'true' }}
#        run: gh secret set AWS_KEY_ID --body "${{ env.__AWS_KEY_ID }}"; gh secret set AWS_SECRET_ACCESS_KEY --body "${{ env.__AWS_SECRET_ACCESS_KEY }}"
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}

#      - name: Create Secrets for CF invalidation access
#        if: ${{ env.CF_SECRETS_CHECK == 'true' }}
#        run: gh secret set CF_KEY_ID --body "${{ env.__CF_KEY_ID }}"; gh secret set CF_SECRET_ACCESS_KEY --body "${{ env.__CF_SECRET_ACCESS_KEY }}"; gh secret set CF_DISTRIBUTION --body "${{ env.__CF_DISTRIBUTION }}"
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}

#      - name: Create Secret for Bucket name
#        if: ${{ env.BUCKET_SECRET_CHECK == 'true' }}
#        run: gh secret set AWS_BUCKET --body "${{ env.__AWS_BUCKET }}"
#        env:
#          GITHUB_TOKEN: ${{ secrets.PAT }}
